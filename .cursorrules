# MapDesk Flutter Project - Cursor AI Rules

## Project Overview
This is a Flutter desktop application for macOS called "map_desk" that will integrate mapping functionality with GPX data support. The project is in early development, currently based on the default Flutter counter template but intended to become a full-featured mapping application.

## Project Structure
- **Language**: Dart (Flutter)
- **Platform**: macOS Desktop (primary target)
- **Main Directory**: `app/` (Flutter project root)
- **Source Code**: `app/lib/main.dart`
- **Dependencies**: Managed via `app/pubspec.yaml`

## Development Environment
- **Flutter SDK**: ^3.8.0
- **Target Platform**: macOS desktop
- **Build Commands**: 
  - Development: `cd app && flutter run -d macos`
  - Production: `cd app && flutter build macos`

## Current State
- âœ… Basic Flutter project setup complete
- âœ… AppBar removed for full-screen layout
- âœ… Debug banner disabled
- ðŸ”„ Planning to integrate flutter_map for OpenStreetMap
- ðŸ”„ Planning to add GPX data support

## Coding Standards
- Use Material Design components
- Follow Flutter/Dart naming conventions
- Prefer stateful widgets for interactive components
- Use const constructors where possible
- Include meaningful comments for complex logic

## Key Dependencies (Planned)
- `flutter_map`: For OpenStreetMap integration
- GPX parsing libraries (TBD)
- File handling for GPX import/export

## Development Workflow
1. **CRITICAL**: Always run Flutter commands from the `app/` directory
2. Use `cd app && flutter run -d macos` for development
3. Use hot reload (`r`) for quick iterations
4. Build release versions with `cd app && flutter build macos`

## File Locations
- **Main App**: `app/lib/main.dart`
- **Dependencies**: `app/pubspec.yaml`
- **Tests**: `app/test/`
- **Built App**: `app/build/macos/Build/Products/Release/map_desk.app`

## Common Commands
**IMPORTANT**: All Flutter commands must be run from the `app/` directory!

```bash
# Navigate to project (ALWAYS DO THIS FIRST)
cd app

# Run in development (from app directory)
flutter run -d macos

# Hot reload (when app is running)
r

# Build release (from app directory)
flutter build macos

# Open built app (from app directory)
open build/macos/Build/Products/Release/map_desk.app

# Add dependencies (from app directory)
flutter pub add package_name

# Get dependencies (from app directory)
flutter pub get
```

## Command Templates for AI Assistant
When running Flutter commands, ALWAYS use these patterns:

- **Run App**: `cd app && flutter run -d macos`
- **Build App**: `cd app && flutter build macos`
- **Add Dependency**: `cd app && flutter pub add package_name`
- **Get Dependencies**: `cd app && flutter pub get`
- **Open Built App**: `cd app && open build/macos/Build/Products/Release/map_desk.app`

## Next Development Steps
1. Add flutter_map dependency
2. Replace counter UI with basic map view
3. Implement GPX file loading
4. Add map interaction features
5. Implement GPX track visualization

## Notes
- The project uses a clean, full-screen layout (no AppBar)
- Debug banner is disabled for clean UI
- Focus on desktop UX patterns for macOS
- Prioritize performance for map rendering
- **REMEMBER**: Flutter project root is `app/`, not the parent directory 