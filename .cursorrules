# MapDesk Flutter Project - Cursor AI Rules

## Project Overview
This is a Flutter desktop application for macOS called "MapDesk" that integrates mapping functionality with GPX data support. The project follows a versioned development approach with clear architectural patterns.

## Project Structure
- **Language**: Dart (Flutter)
- **Platform**: macOS Desktop (primary target)
- **Main Directory**: `app/` (Flutter project root)
- **Source Code**: `app/lib/`
- **Dependencies**: Managed via `app/pubspec.yaml`

## Development Versions
- **v001 (COMPLETE)**: Menu bar, GPX file loading, placeholder map
- **v002 (Planned)**: Interactive map display with OpenStreetMap
- **Future**: v003, v004, etc. with advanced mapping features

## File Organization
```
app/
├── lib/
│   ├── main.dart                 # App entry point
│   ├── models/
│   │   └── gpx_track.dart       # GPX data models
│   ├── services/
│   │   ├── gpx_service.dart     # GPX file parsing
│   │   └── map_service.dart     # Map state management (v002)
│   ├── widgets/
│   │   ├── placeholder_map.dart # v001 placeholder
│   │   ├── map_view.dart        # v002 map widget
│   │   └── map_controls.dart    # v002 controls
│   └── screens/
│       └── home_screen.dart     # Main app screen
├── pubspec.yaml                 # Dependencies
├── macos/Runner/Info.plist      # macOS app configuration
└── plan/                        # Implementation plans
    ├── v001-implementation-plan.md   # v001 plan
    └── v002-implementation-plan.md   # v002 plan
```

## Coding Standards

### Flutter/Dart Conventions
- Use Material Design components with macOS adaptations
- Follow Flutter/Dart naming conventions (camelCase, PascalCase)
- Prefer stateful widgets for interactive components
- Use const constructors where possible
- Include meaningful comments for complex logic

### Architecture Patterns
- **Widget-based architecture** following Flutter best practices
- **Service layer** for business logic (GPX parsing, map state)
- **Model layer** for data structures
- **PlatformMenuBar** for native macOS menu integration
- **Provider pattern** for state management (v002+)

### Menu Structure (macOS Native)
```
MapDesk (Application Menu)
├── Quit                    ⌘Q

File
├── Open                    ⌘O

Window
├── MapDesk                 (no shortcut)
```

### Dependencies by Version
**v001 (IMPLEMENTED):**
- `file_picker: ^6.1.1` - File selection
- `xml: ^6.3.0` - GPX parsing

**v002 (Planned):**
- `flutter_map: ^6.0.1` - OpenStreetMap integration
- `latlong2: ^0.8.1` - Coordinate handling
- `provider: ^6.1.1` - State management

## Development Workflow

### Critical Rules
1. **ALWAYS run Flutter commands from the `app/` directory**
2. **CocoaPods Path**: Export PATH="/opt/homebrew/lib/ruby/gems/3.4.0/bin:$PATH" before running
3. **Target Platform**: macOS desktop only
4. **Hot Reload**: Use `r` for quick iterations during development
5. **File Documentation**: Every new source file must have a one-line comment at the top describing its primary purpose

### Common Commands
```bash
# Navigate to project (ALWAYS DO THIS FIRST)
cd app

# Run in development (with CocoaPods path fix)
export PATH="/opt/homebrew/lib/ruby/gems/3.4.0/bin:$PATH" && flutter run -d macos

# Add dependencies
flutter pub add package_name

# Get dependencies
flutter pub get

# Clean build (if needed)
flutter clean

# Build release
flutter build macos
```

## Design Philosophy
- **Map data is central** — platform revolves around geographic visualization
- **Minimalism by default** — clean, distraction-free interface
- **Desktop-first** — optimized for macOS desktop experience
- **Versioned development** — build solid foundation before adding complexity

## UI/UX Guidelines

### v001 Interface (IMPLEMENTED)
- Native macOS menu bar integration using PlatformMenuBar
- "Map goes here" placeholder with status display
- Clean error handling and user feedback
- System colors and fonts (SF Pro on macOS)
- Full-screen map area (no custom menu bar widget)

### Color Scheme
- **Primary**: System blue (#007AFF)
- **Background**: Light gray (#F5F5F5) for placeholder
- **Success**: Green shades for loaded files
- **Error**: Red shades for error states
- **Text**: Dark gray (#1C1C1E) for content

### Typography
- **System font** (SF Pro on macOS)
- **Placeholder text**: 24pt light weight
- **Status text**: 16pt regular weight
- **Menu text**: Standard macOS styling

## Implementation Details

### macOS Configuration
- **App Name**: Set in `macos/Runner/Info.plist` as `CFBundleName = "MapDesk"`
- **Menu Integration**: Uses Flutter's `PlatformMenuBar` for native menu bar
- **Keyboard Shortcuts**: Implemented with `SingleActivator` for ⌘O and ⌘Q

### GPX File Handling
- **File Selection**: Uses `file_picker` with `.gpx` extension filter
- **Parsing**: Robust XML parsing with error handling
- **Data Model**: Clean `GpxTrack` and `GpxPoint` classes
- **Status Display**: Shows track name, point count, and description

### Error Handling
- Graceful GPX parsing error handling
- Clear user feedback for file loading issues
- Non-blocking UI during file operations
- Meaningful error messages with visual indicators

## Testing Approach
- Test GPX file loading with various file formats
- Verify menu functionality and keyboard shortcuts
- Ensure proper macOS integration
- Test error scenarios (invalid files, permissions)

## v001 Success Metrics (ACHIEVED)
- [x] App launches without errors
- [x] Native menu bar displays with proper menus
- [x] File > Open opens file picker for GPX files
- [x] MapDesk > Quit closes the application
- [x] GPX files parse and display track information
- [x] Error handling works for invalid files
- [x] Keyboard shortcuts work (⌘O, ⌘Q)
- [x] Clean, professional interface
- [x] Follows macOS conventions

## Future Considerations
- Architecture supports multiple track loading
- Clean separation between file handling and map logic
- Extensible for additional map providers
- Ready for v002 map integration

## Known Issues & Workarounds
- **File picker warnings**: Plugin architecture warnings are harmless and don't affect functionality
- **CocoaPods path**: Must export gem bin directory to PATH before running
- **Build cache**: Use `flutter clean` if encountering build issues
- **Menu naming**: Application menu shows "MapDesk" via Info.plist configuration

## Notes
- v001 is complete and fully functional
- Focus on v002 map integration for next development cycle
- Maintain clean, minimal interface throughout development
- All v001 success metrics have been achieved 

# MapDesk Menu Naming Rules

## Critical Menu Item Names
- **NEVER** modify the standard menu item names:
  - Keep "Open" as "Open" (not "Open GPX..." or similar)
  - Keep "Quit" as "Quit" (not "Quit MapDesk" or similar)
  - These follow macOS conventions and must not be changed

## Menu Structure Reference
```
MapDesk (Application Menu)
├── Quit                    ⌘Q

File
├── Open                    ⌘O

Window
├── MapDesk                 (no shortcut)
```

## Flutter UI Rules
- Always set `debugShowCheckedModeBanner: false` in every `MaterialApp` to hide the debug banner in all builds.
- Always use the `file_selector` package for file selection in Flutter projects (do not use `file_picker` or other packages for this purpose).

## Flutter Project Configuration Best Practices

### Xcode Project Configuration
- **NEVER** modify the `project.pbxproj` file manually unless absolutely necessary
- If build issues occur, restore the original `project.pbxproj` from git repository
- The default Flutter-generated configuration handles engine paths correctly
- Modifying engine paths can break the build process
- When in doubt, use `git checkout` to restore original configuration

### Troubleshooting Steps
1. First try restoring original configuration files
2. Clean and rebuild the project
3. Only modify project configuration as a last resort
4. Document any necessary configuration changes

## Database Migration Rules

### Critical Database Rules
1. **ALWAYS create a migration** when modifying database schema:
   - Increment `_databaseVersion` in `DatabaseService`
   - Add migration logic in `_onUpgrade` method
   - Test migration with existing data
   - Document schema changes in version plan

2. **Migration Requirements**:
   - Create new table with updated schema
   - Copy data from old table to new table
   - Drop old table
   - Rename new table to original name
   - Handle data type conversions if needed
   - Preserve existing data integrity

3. **Migration Testing**:
   - Test with existing database
   - Verify data preservation
   - Check foreign key constraints
   - Validate indexes and constraints
   - Test rollback scenarios

4. **Version Control**:
   - Document schema changes in version plan
   - Include migration steps in documentation
   - Tag database version in commit message
   - Review migration with team before merging

5. **Error Handling**:
   - Log migration steps
   - Handle migration failures gracefully
   - Provide rollback mechanism
   - Include error recovery steps

### Migration Example
```dart
// Increment version
static const int _databaseVersion = 2;

// Add migration
Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
  if (oldVersion < 2) {
    // Create new table
    await db.execute('CREATE TABLE table_new (...)');
    
    // Copy data
    await db.execute('INSERT INTO table_new SELECT ... FROM table');
    
    // Drop old table
    await db.execute('DROP TABLE table');
    
    // Rename new table
    await db.execute('ALTER TABLE table_new RENAME TO table');
  }
}
```

## Implementation Plan Rules
- **NEVER** include testing requirements in implementation plans
- **NEVER** include timeline estimates in implementation plans
- Focus on implementation steps, UI changes, and success criteria
- Keep plans concise and focused on what needs to be built